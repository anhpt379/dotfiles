# Enable OSC 8 to work in tmux
set-option -ga terminal-features "*:hyperlinks"

# Override tmux-sensible default-terminal value
set-option -g default-terminal xterm-kitty

# Fix slow new pane creation
# https://github.com/tmux/tmux/issues/1087#issuecomment-331949035
set-option -g default-shell ~/.local/bin/fish

# Hide tmux messages after 1s
set-option -g display-time 1000

# Don't send titles to the outer tmux
set-option -g set-titles off

# Set vi mode for copy mode
set-option -g mode-keys vi

# Turn on mouse mode
set-option -g mouse on

# Send FocusGained/FocusLost events to vim
set-option -g focus-events on

# Jump between words in tmux command prompt with Option+H/L
set-option -g status-keys emacs

# Start window numbers at 1 to match keyboard order with tmux window order
set-option -g base-index 1
set-option -g pane-base-index 1

# Renumber windows sequentially after closing any of them
set-option -g renumber-windows on

# Higher history limit
set-option -g history-limit 100000

# Notify when a command prints something
set-option -g monitor-activity on
set-option -g visual-activity  off
set-option -g activity-action  other

# Notify when a command finishes
set-option -g monitor-bell on
set-option -g visual-bell  off
set-option -g bell-action  other

# Allow updating window name from fish_title
set-option -g allow-rename on

# Don't suspend-client
unbind-key C-z

# Run commands embedded in the status line more often
set-option -g status-interval 1

# Fix incorrect SSH_AUTH_SOCK when tmux is reconnected
set-option -g update-environment -r
set-environment -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
set-environment -g SSH_TTY $HOME/.ssh/ssh_tty

# Styles
set-option -g mode-style                    'bg=#ffcc66 fg=black'
set-option -g copy-mode-current-match-style 'bg=#ffcc66 fg=black'
set-option -g copy-mode-match-style         'bg=white fg=black'
set-option -g message-style                 'bg=#161616 fg=yellow blink'
set-option -g status-style                  'bg=#161616 fg=white none'
set-option -g status-left                   ''
set-option -g status-right                  ''
set-option -g status-justify                left
set-option -g pane-active-border-style      'bg=#161616 fg=#464646'
set-option -g pane-border-style             'bg=#161616 fg=#464646'
set-option -g pane-border-lines             heavy
set-option -g window-status-separator       ' '
set-option -g window-status-style           'bg=#333333 fg=#999999'
set-option -g window-status-current-style   'bg=#eeeeee fg=#161616 bold'
set-option -g window-status-activity-style  'bg=#333333 fg=#999999'
set-option -g window-status-bell-style      'bg=yellow fg=black'

set-option -g window-status-format         '   #{window_name}   '
set-option -g window-status-current-format '   #{window_name}   '

# OS specific settings
%if '#{m:*lima-*,#{host}}'
  set-option -g status-position top

  # Local tmux keymappings
  # Tmux prefix: Option+Shift (Command is mapped to Option+Shift in
  # Kitty/WezTerm)
  bind-key -T root M-T new-window
  bind-key -T root M-W kill-pane
  bind-key -T root M-N next-window
  bind-key -T root M-P previous-window
  bind-key -T root M-S split-window -v -l 15% -c '#{pane_current_path}'
  bind-key -T root M-\" if-shell 'test "$(tmux display-message -p "#{pane_height}")" -lt 25' { resize-pane -y 80% } { resize-pane -y 15% }
  bind-key -T root M-O break-pane -a
  bind-key -T root M-R { source-file ~/.tmux.conf; display-message '~/.tmux.conf reloaded' }

  # tmux-fingers
  set-option -g @fingers-pattern-1 '\b([A-Z]+-\d+)\b'  # JIRA ticket id
  set-option -g @fingers-pattern-2 '^([a-z0-9-]+-[bcdfghjklmnpqrstvwxz0123456789]+-[bcdfghjklmnpqrstvwxz0123456789]{5})\s'  # Kubernetes pod name
  set-option -g @fingers-key '-n M-F'
  set-option -g @fingers-main-action ':paste:'
  set-option -g @fingers-shift-action ':open:'
  set-option -g @fingers-keyboard-layout 'qwerty-homerow'
  run-shell ~/.tmux/plugins/tmux-fingers/tmux-fingers.tmux

  bind-key -T root M-~ last-window
  bind-key -T root M-\{ { swap-window -t -1; select-window -t -1 }
  bind-key -T root M-\} { swap-window -t +1; select-window -t +1 }

  bind-key -T root M-) select-pane -l
  bind-key -T root M-( select-pane -l

  bind-key -T root M-_ resize-pane -D 5
  bind-key -T root M-+ resize-pane -U 5

  bind-key -T root M-\; command-prompt -p '> tmux'

  # Fix pbpaste doesn't work on remote servers
  # We need a way to call `tmux refresh-client -l` on the local tmux before pasting to
  # the remote one. Below are the keys I use to paste, so it should do the trick.
  bind-key -T root p     if-shell -F '#{m:*ssh *,#{window_name}}' { run-shell -b 'tmux refresh-client -l'; send-keys p     } { send-keys p     }
  bind-key -T root P     if-shell -F '#{m:*ssh *,#{window_name}}' { run-shell -b 'tmux refresh-client -l'; send-keys P     } { send-keys P     }
  bind-key -T root Enter if-shell -F '#{m:*ssh *,#{window_name}}' { run-shell -b 'tmux refresh-client -l'; send-keys Enter } { send-keys Enter }

  # Fix Ctrl+P needs to be double-pressed to work in docker containers.
  # Changing detachKeys in ~/.docker/config.json doesn't work on servers, because there's
  # another process (credHelpers) also wants to manage that file.
  bind-key -T root C-p   if-shell -F '#{m:*ssh *,#{window_name}}' { run-shell -b 'tmux refresh-client -l'; send-keys Up    } { send-keys Up }

%else
  set-option -g status-position bottom

  # Remote key mappings
  # Tmux prefix: Option
  bind-key -T root M-t new-window
  bind-key -T root M-w kill-pane
  bind-key -T root M-n next-window
  bind-key -T root M-p previous-window
  bind-key -T root M-s split-window -v -l 15% -c '#{pane_current_path}'
  bind-key -T root M-o break-pane -a
  bind-key -T root M-\' if-shell 'test "$(tmux display-message -p "#{pane_height}")" -lt 25' { resize-pane -y 80% } { resize-pane -y 15% }
  bind-key -T root M-r { source-file ~/.tmux.conf; display-message '~/.tmux.conf reloaded' }

  bind-key -T root M-` last-window
  bind-key -T root M-[ { swap-window -t -1; select-window -t -1 }
  bind-key -T root M-] { swap-window -t +1; select-window -t +1 }

  bind-key -T root M-0 select-pane -l
  bind-key -T root M-9 select-pane -l

  bind-key -T root M-- resize-pane -D 5
  bind-key -T root M-= resize-pane -U 5

  # K9s custom key bindings: `l` to open, `h` to go back
  bind-key -T root l if-shell -F '#{m:k9s,#{window_name}}'   { send-keys Enter  } { send-keys l   }
  bind-key -T root h if-shell -F '#{m:k9s,#{window_name}}'   { send-keys Escape } { send-keys h   }
  bind-key -T root C-p if-shell -F '#{m:k9s,#{window_name}}' { send-keys Up     } { send-keys C-p }
  bind-key -T root C-n if-shell -F '#{m:k9s,#{window_name}}' { send-keys Down   } { send-keys C-n }
%endif

# Replace the default prefix key binding
set-option -g prefix M-Space

# Fix osc52 copy to clipboard doesn't work in tmux
set-option -g set-clipboard on
set-option -g escape-time 100

# Fix Home/End key doesn't work in tmux
# https://stackoverflow.com/a/55616731
bind-key -T root Home send-keys Escape OH
bind-key -T root End  send-keys Escape OF

# Send copy to macOS clipboard
set-option -g copy-command "~/.local/bin/strip_whitespace | ~/.local/bin/termux-clipboard-set"

# Double click to select & copy a word
bind-key -T root         SecondClick1Pane if-shell -F '#{alternate_on}' { select-pane; send-keys -M } { select-pane; copy-mode -e; set-option word-separators ''; send-keys -X select-word; send-keys -X copy-pipe-no-clear; set-option -u word-separators; run-shell -d 0.4; if-shell -F '#{scroll_position}' { } { copy-mode -q } }
bind-key -T copy-mode-vi SecondClick1Pane { select-pane; set-option word-separators ''; send-keys -X select-word; send-keys -X copy-pipe-no-clear; set-option -u word-separators; run-shell -d 0.4; if-shell -F '#{scroll_position}' { } { copy-mode -q } }

# Fix slow mouse double-click (`SecondClick` event is faster)
unbind-key -T root         DoubleClick1Pane
unbind-key -T copy-mode-vi DoubleClick1Pane

# Disable triple-click, since it doesn't work due to we exit copy mode on second click
# Second click event fires before triple click; it can be fixed by switching from
# second click to double click, but double click has a delay, and I hate it.
unbind-key -T root         TripleClick1Pane
unbind-key -T copy-mode-vi TripleClick1Pane

# Disable changing tabs with mouse wheel (it's too fast and confusing)
unbind-key -T root WheelUpStatus
unbind-key -T root WheelDownStatus

# Copy to system clipboard with `y/Y`
bind-key -T copy-mode-vi y send-keys -X copy-pipe
bind-key -T copy-mode-vi Y { send-keys -X begin-selection; send-keys $; send-keys -X cursor-left; send-keys -X copy-pipe-no-clear; run-shell -d 0.4; send-keys -X clear-selection }

# `q` to exit copy mode
bind-key -T copy-mode-vi q copy-mode -q

# `p` to paste from copy mode
bind-key -T copy-mode-vi p { send-keys -X copy-pipe-no-clear; copy-mode -q; paste-buffer -p }

# Mouse single click to clear selection
bind-key -T copy-mode-vi MouseDown1Pane { select-pane; send-keys -X clear-selection }

# Select text to copy
bind-key -T copy-mode-vi MouseDragEnd1Pane if-shell -F '#{selection_present}' { if-shell -F '#{scroll_position}' { send-keys -X copy-pipe-no-clear } { send-keys -X copy-pipe; copy-mode -q } }

# Scroll one line at a time, and don't extend selection on mouse scroll
bind-key -T copy-mode-vi WheelUpPane   { select-pane; send-keys -X -N 1 scroll-up   }
bind-key -T copy-mode-vi WheelDownPane { select-pane; send-keys -X -N 1 scroll-down }

# Vim-style text selection
bind-key -T copy-mode-vi C-v if-shell -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X begin-selection; send-keys -X rectangle-toggle }
bind-key -T copy-mode-vi v   if-shell -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X begin-selection }
bind-key -T copy-mode-vi V   if-shell -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X select-line }

# Text objects: `viw` to select word, `viW` to select WORD, `vil` to select line
bind-key -T copy-mode-vi i if-shell -F '#{selection_present}' { switch-client -T text-object } { copy-mode -q }
bind-key -T text-object  w if-shell -F '#{selection_present}' { send-keys -X cursor-right; send-keys -X select-word }
bind-key -T text-object  W if-shell -F '#{selection_present}' { set-option word-separators ''; send-keys -X select-word; set-option -u word-separators }
bind-key -T text-object  l if-shell -F '#{selection_present}' { send-keys -X select-line }

# `p` to jump between prompts
shell_prompt_regex='^█|^(\(.+?\))? *\[.+ [~/].*\]'
bind-key -T copy-mode-vi P send-keys -X search-backward ${shell_prompt_regex}

# Enable incremental search in copy-mode-vi
bind-key -T copy-mode-vi ? command-prompt -i -I '#{pane_search_string}' -T search -p 'search up:'   { send-keys -X search-backward-incremental '%%' }
bind-key -T copy-mode-vi / command-prompt -i -I '#{pane_search_string}' -T search -p 'search down:' { send-keys -X search-forward-incremental  '%%' }

bind-key -T copy-mode-vi C-p send-keys -X search-backward ${shell_prompt_regex}
bind-key -T copy-mode-vi C-n send-keys -X search-forward  ${shell_prompt_regex}
